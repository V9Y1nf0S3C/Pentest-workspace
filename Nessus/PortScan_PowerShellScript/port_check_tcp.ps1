# File containing list of IP addresses
$ipAddressFile_Windows = "windows.txt"
$ipAddressFile_Linux = "linux.txt"

# List of ports to check
$ports_linux = @(22)
$ports_windows = @(445, 139, 135)

# Read list of IP addresses from file
$ipAddressList_windows = Get-Content $ipAddressFile_Windows
$ipAddressList_linux = Get-Content $ipAddressFile_Linux

# File to write results to
$outputFile = "output.txt"

# Loop through each IP address and check if the specified ports are available
foreach ($ipAddress in $ipAddressList_windows) {
  Write-Host "`nTesting the Windows Host: $ipAddress"
  foreach ($port in $ports_windows) {

    $tcpClient = New-Object System.Net.Sockets.TcpClient
    try {
      $result = $tcpClient.BeginConnect($ipAddress, $port, $null, $null)
      $wait = $result.AsyncWaitHandle.WaitOne(1000, $false)
      if ($wait) {
        "$ipAddress`t$port`topen" | Tee-Object -FilePath $outputFile -Append # Out-File $ -Append
      } else {
        "$ipAddress`t$port`tclosed" | Tee-Object -FilePath $outputFile -Append # Out-File $ -Append
      }
    } catch {
      "$ipAddress`t$port`tclosed" | Tee-Object -FilePath $outputFile -Append
    } finally {
      $tcpClient.Close()
    }
  }
}


foreach ($ipAddress in $ipAddressList_linux) {
  Write-Host "`nTesting the Linux Host: $ipAddress"
  foreach ($port in $ports_linux) {
    $tcpClient = New-Object System.Net.Sockets.TcpClient
    try {
      $result = $tcpClient.BeginConnect($ipAddress, $port, $null, $null)
      $wait = $result.AsyncWaitHandle.WaitOne(1000, $false)
      if ($wait) {
        "$ipAddress`t$port`topen" | Tee-Object -FilePath $outputFile -Append # Out-File $ -Append
      } else {
        "$ipAddress`t$port`tclosed" | Tee-Object -FilePath $outputFile -Append # Out-File $ -Append
      }
    } catch {
      "$ipAddress`t$port`tclosed" | Tee-Object -FilePath $outputFile -Append
    } finally {
      $tcpClient.Close()
    }
  }
}


