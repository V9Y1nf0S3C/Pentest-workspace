//[Nessus Scan > Vulnerabilities > Open a vulnerability] List of effected hosts
//No identification of Duplicates
const x=document.querySelector("#content > section > div.main-column > div:nth-child(3) > ul").getElementsByTagName("a"); 
for (let i=0;i<x.length;i++){
 console.log(i+1 + ".\t" + x[i].innerHTML)
}

//With identification of Duplicates
const x = document.querySelector("#content > section > div.main-column > div:nth-child(3) > ul").getElementsByTagName("a");
const all_hosts = [];

for (let i = 0; i < x.length; i++) {
  all_hosts.push(x[i].innerHTML);
}

const unique_hosts = new Set(all_hosts);

if (unique_hosts.size === all_hosts.length) {
  console.log("Total hosts: " + all_hosts.length + "\n\nAll '" + unique_hosts.size + "' hosts are unique. No duplicate hosts found.");
  all_hosts.forEach((host, index) => {
    console.log(index + 1 + ".\t" + host);
  });
} else {
  console.log("Total hosts: " + all_hosts.length + "\nUnique hosts: " + unique_hosts.size + "\n\nDuplicate hosts found.\n\n");
  console.log("\nTotal hosts list: [" + all_hosts.length + "]");
  all_hosts.forEach((host, index) => {
    console.log("Total_" + (index + 1) + ".\t" + host);
  });

  console.log("\nUnique hosts list: [" + unique_hosts.size + "]");
  let uniqueIndex = 1;
  unique_hosts.forEach((host) => {
    console.log("Unique_" + (uniqueIndex++) + ".\t" + host);
  });

  const duplicate_hosts = all_hosts.filter((host, index, arr) => arr.indexOf(host) !== index);
  const uniqueDuplicateHosts = [...new Set(duplicate_hosts)];
  console.log("\nDuplicate hosts list:");
  uniqueDuplicateHosts.forEach((host, index) => {
    console.log("Duplicate_" + (index + 1) + ".\t" + host);
  });
}
