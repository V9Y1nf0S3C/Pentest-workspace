#! python3
import xml.etree.ElementTree as ET
import xlsxwriter
import re
import pandas as pd
import sys
import os

'''
Features added
    Input as argument
    Get more details from asset list
        Out Comparison:
            L1 - Check for exact match (complete domain name) [Nessus(test.google.com) == AssetList(test.google.com)]
            L2 - Check for Nessus split match [Nessus(test) == AssetList(test.google.com)]
            L3 - Check for Both split match [Nessus(test.) == AssetList(test.)]
    Function created for repetative tasks
    L2 & L3 information & results provided with more details
    Support multiple args    
    policyValue & actualValue are added to report
    Colorcoded and customised asset list sheet names & displaying the same

Bug Fixes:
    Hostname detected
    Nessus scan errors also fetched from nessus scan file
    NaN & inf errors are handled
    server generate only one entry on console when the host is not found
    v0.2 2023.07.20 : HCR missing item in the list is fixed.
    
Pending
    regex input as arg    
Flow:
    1.Read 1 nessus from command line argument
    2.Read 'HCR' sheet in the 'assetlist.xlsx' file for asset details
    3.Read 'HCR_CIS' sheet in the 'assetlist.xlsx' file for CIS HCR {Compliance Type, HCR Type}
    4.Generate output that use .nessus file and assetlist.xlsx contents  
'''



def generate_HCR_Report(nessusXmlFile, xlsxOutFile, assetListFile, AssetSheetName, AssetHCRRef):

    global input_val_error, input_val_count, df, df2
    global bDescription, complianceStatus, complianceInfo, solution, seeAlso, policyValue, actualValue, \
        complianceStatusError, complianceErrorDesc
    tree = ET.parse(nessusXmlFile)
    workbook = xlsxwriter.Workbook(xlsxOutFile)
    root = tree.getroot()
    ns = {'cm': 'http://www.nessus.org/cm'}
    worksheet = workbook.add_worksheet()

    df = pd.read_excel(assetListFile, AssetSheetName)
        
    df2 = pd.read_excel(assetListFile, AssetHCRRef)
    xms_assets_dict = {}

    df.replace([float('nan'), float('inf')], '', inplace=True)
    df2.replace([float('nan'), float('inf')], '', inplace=True)

    input_val_error = False
    input_val_count = 0
    worksheet.write('A1', 'S.No')
    worksheet.write('B1', 'HCR Type')
    worksheet.write('C1', 'OS')
    worksheet.write('D1', 'Compliance Type')
    worksheet.write('E1', 'Environment')
    worksheet.write('F1', 'Network Zone')
    worksheet.write('G1', 'Network Tier')
    worksheet.write('H1', 'Server Description')
    worksheet.write('I1', 'Nessus identity')
    worksheet.write('J1', 'Hostname')
    worksheet.write('K1', 'IP Address')
    worksheet.write('L1', 'Detailed Description')
    worksheet.write('M1', 'Brief Description')
    worksheet.write('N1', 'Compliance Info')
    worksheet.write('O1', 'Solution')
    worksheet.write('P1', 'Compliance Status')
    worksheet.write('Q1', 'Opensource Comments')
    worksheet.write('R1', 'Customer Comments')
    worksheet.write('S1', 'Agency Comments')
    worksheet.write('T1', 'Expected & Actual Output')
    worksheet.write('U1', 'Expected Output')
    worksheet.write('V1', 'Actual Output')
    worksheet.write('W1', 'SCAN ERROR?')
    worksheet.write('X1', 'Audit File')
    worksheet.write('Y1', 'Benchmark Name')
    worksheet.write('Z1', 'See Also')
    worksheet.write('AA1', 'Compliance')
    worksheet.write('AB1', 'Check Type')
    worksheet.write('AC1', 'Err (if Reported)')
    row = 1
    ipv4_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}$')

    def check_for_duplicates(string, src, dst, split_Scan=False, hcr_scan=False):
        global input_val_error, input_val_count, df, df2
        



        if hcr_scan:
            x = df2.loc[df2[src].apply(lambda y: str(y).casefold()) == string.casefold(), dst]
        else:
            if string in xms_assets_dict:
                if xms_assets_dict[string] == False:
                    return ''
            else:
                if split_Scan:
                    temp = df[src].str.contains(string + ".", case=False).any()
                else:
                    temp = string in df[src].values
                xms_assets_dict[string] = temp
                if temp:
                    print('\x1b[1;32;40m' + 'INFO!' + '\x1b[0m '  + src + ' found on asset list: ' + string + '.') #Green output

                else:
                    print('\x1b[1;33;40m' + 'WARNING!' + '\x1b[0m '  + src + ' not found on asset list: ' + string + '.') #Yellow output
                    input_val_error = True
                    input_val_count = input_val_count + 1                    
                    return ''

            if split_Scan:
                x = df.loc[df[src].str.contains(string + ".", case=False), dst]
            else:
                x = df.loc[df[src].apply(lambda y: str(y).casefold()) == string.casefold(), dst]

        if (len(x) > 1) or (len(x) < 1):
            input_val_error = True
            input_val_count = input_val_count + 1
        else:
            input_val_error = False

        if len(x) > 1:
            print('\x1b[1;31;40m' + 'ERROR!' + '\x1b[0m' + ' [COUNT ' + str(
                input_val_count) + ']: Duplicate input detected for: ' + string + '.\t Selecting first entry')
            return x.values[0]
        elif len(x) == 0:
            return ""
        else:
            return x.values[0]

    def get_IP_from_nessus_identity(string):
        x = check_for_duplicates(string, 'Server Name (FQDN)', 'IP Address', False)
        if x == '':
            print('\x1b[1;35;40m' + 'L2' + '\x1b[0m ', end="")
            x = check_for_duplicates(string.split(".")[0], 'Server Name (FQDN)', 'IP Address', False)
            if x == '':
                print('\x1b[1;35;40m' + 'L3' + '\x1b[0m ', end="")
                x = check_for_duplicates(string.split(".")[0], 'Server Name (FQDN)', 'IP Address', True)
                if x == '':
                    print(f'Found server name as: "{string.split(".")[0]}."')
                else:
                    print(f'Server name not found as: "{string.split(".")[0]}." | Check the Asset List')
                return x
            else:
                print(f'Found server name as: "{string.split(".")[0]}"')
                return x
        else:
            return x

    def get_env_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'Environment')

    def get_fqdn_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'Server Name (FQDN)')

    def get_nwzone_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'Network Zone')

    def get_nwtier_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'Network Tier')

    def get_os_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'OS')

    def get_srvdesc_from_ip(string):
        return check_for_duplicates(string, 'IP Address', 'Server Description')

    def find_and_assign(report_item, string):
        x = report_item.findtext(string, namespaces={'cm': 'http://www.nessus.org/cm'})
        if x is None:
            x = ''

        return x

    def concat_expected_actual_out():
        global policyValue, actualValue, complianceStatusError
        x = ''
        if policyValue != '':
            x = 'Expected Output:\n' + policyValue
        if actualValue != '':
            if x != '':
                x = x + '\n\n'
            x = x + 'Actual Output:\n' + actualValue
        if complianceStatusError != '':
            if x != '':
                x = x + '\n\n'
            x = x + 'Error:\n' + complianceErrorDesc
        return x

    def concat_description():
        global bDescription, complianceStatus, complianceInfo, solution, seeAlso, policyValue, actualValue, \
            complianceStatusError, complianceErrorDesc
        x = '"' + bDescription + '" : [' + complianceStatus + ']'
        if complianceInfo != '':
            x = x + '\n\n' + complianceInfo
        if solution != '':
            x = x + '\n\nSolution:\n' + solution
        if seeAlso != '':
            x = x + '\n\nSee Also: ' + seeAlso
        if policyValue != '':
            x = x + '\n\nPolicy Value:\n' + policyValue
        if actualValue != '':
            x = x + '\n\nActual Value:\n' + actualValue
        if complianceStatusError != '':
            x = x + '\n\nError:\n' + complianceErrorDesc
        return x




    for report_host in root.findall('Report/ReportHost'):
        nessus_host = report_host.get('name')
        if ipv4_pattern.match(nessus_host):
            ip_address = nessus_host
        else:
            print(
                '\x1b[2;35;40m' + 'INFO!' + '\x1b[0m Hostname detected as source. Searching for IP of ' + nessus_host + '.')
            ip_address = get_IP_from_nessus_identity(nessus_host)

        ip_env = get_env_from_ip(ip_address)
        ip_fqdn = get_fqdn_from_ip(ip_address)
        ip_nw_zone = get_nwzone_from_ip(ip_address)
        ip_nw_tier = get_nwtier_from_ip(ip_address)
        ip_OS = get_os_from_ip(ip_address)
        ip_srv_desc = get_srvdesc_from_ip(ip_address)


        one_time = True

        for report_item in report_host.findall('ReportItem'):
            pluginFamily = report_item.get('pluginFamily')
            if pluginFamily != 'Policy Compliance':
                continue

            bDescription = find_and_assign(report_item, 'cm:compliance-check-name')
            complianceInfo = find_and_assign(report_item, 'cm:compliance-info')
            solution = find_and_assign(report_item, 'cm:compliance-solution')
            complianceStatus = find_and_assign(report_item, 'cm:compliance-result')
            policyValue = find_and_assign(report_item, 'cm:compliance-policy-value')
            actualValue = find_and_assign(report_item, 'cm:compliance-actual-value')
            auditFile = find_and_assign(report_item, 'cm:compliance-audit-file')
            benchmarkName = find_and_assign(report_item, 'cm:compliance-benchmark-name')
            seeAlso = find_and_assign(report_item, 'cm:compliance-see-also')
            compliance = find_and_assign(report_item, 'compliance')
            checkType = find_and_assign(report_item, 'compliance_check_type')
            complianceErrorDesc = find_and_assign(report_item, 'cm:compliance-error')

            hcr_comp_type = check_for_duplicates(benchmarkName, 'Benchmark Name', 'Compliance Type', False, True)
            hcr_hcr_type = check_for_duplicates(benchmarkName, 'Benchmark Name', 'HCR Type', False, True)

            if one_time:
                one_time = False
                print(
                    f"{nessus_host} | {ip_address} | {hcr_comp_type}  | {hcr_hcr_type}  | {ip_fqdn} | {ip_env} | ERR ({input_val_error}-{input_val_count})")

            if complianceStatus.casefold() not in ["passed", "failed", "warning"]:
                complianceStatusError = complianceStatus
                complianceStatus = "WARNING"
            else:
                complianceStatusError = ''

            worksheet.write(row, 1, hcr_hcr_type)
            worksheet.write(row, 2, ip_OS)
            worksheet.write(row, 3, hcr_comp_type)
            worksheet.write(row, 4, ip_env)
            worksheet.write(row, 5, ip_nw_zone)
            worksheet.write(row, 6, ip_nw_tier)
            worksheet.write(row, 7, ip_srv_desc)
            worksheet.write(row, 8, nessus_host)
            worksheet.write(row, 9, ip_fqdn)
            worksheet.write(row, 10, ip_address)
            worksheet.write(row, 11, concat_description())
            worksheet.write(row, 12, bDescription)
            worksheet.write(row, 13, complianceInfo)
            worksheet.write(row, 14, solution)
            worksheet.write(row, 15, complianceStatus)
            worksheet.write(row, 19, concat_expected_actual_out())
            worksheet.write(row, 20, policyValue)
            worksheet.write(row, 21, actualValue)
            worksheet.write(row, 22, complianceStatusError)
            worksheet.write(row, 23, auditFile)
            worksheet.write(row, 24, benchmarkName)
            worksheet.write(row, 25, seeAlso)
            worksheet.write(row, 26, compliance)
            worksheet.write(row, 27, checkType)
            if input_val_error:
                worksheet.write(row, 28, input_val_count)
            row += 1

    workbook.close()

asset_list_xlsx_file_name = 'AssetListxlsx.xlsx'
asset_list_VA_HCR_sheet_name = 'Server List'
asset_list_CIS_sheet_name = 'HCR_CIS'

if len(sys.argv) > 1:
    print(f'\n-------------- Activity Started [Total {len(sys.argv)-1} files to process] ---------------')
    for arg in sys.argv[1:]:
        print(f'\n+++++++++++++++++++++++++++++++++ WORKING on [{arg}]') #+++++++++++++++++++++++++++++++++++++
        print(f'++ Scan Type: \x1b[1;35;40mHCR Scan Report \x1b[0m')
        print(f'++ Scan Inputs:')
        print(f'+++ Nessus XML File Name: \x1b[1;34;40m {arg}\x1b[0m')
        print(f'+++++ XLSX file for Assets: \x1b[1;34;40m {asset_list_xlsx_file_name}\x1b[0m')
        print(f'+++++++ Sheet name of Asset List: \x1b[1;34;40m {asset_list_VA_HCR_sheet_name}\x1b[0m')
        print(f'+++++++ Sheet name of CIS Doc Names: \x1b[1;34;40m {asset_list_CIS_sheet_name}\x1b[0m')
        print(f'++ Scan Output: \x1b[1;34;40m {os.path.splitext(arg)[0] + ".xlsx"}\x1b[0m')
        print(f'+ Scan started..\n') #+++++++++++++++++++++++++++++++++++++
        generate_HCR_Report(arg, os.path.splitext(arg)[0] + ".xlsx", asset_list_xlsx_file_name, asset_list_VA_HCR_sheet_name,asset_list_CIS_sheet_name)
    print(f'\n--------------------------------- Activity Completed -------------------------------------')

else:
    generate_HCR_Report('HCR/Apache.nessus', 'HCR/Apache.xlsx', 'AssetListxlsx.xlsx', 'HCR_Assets', 'HCR_CIS')



