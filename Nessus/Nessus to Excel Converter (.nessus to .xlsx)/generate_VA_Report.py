#! python3
import xml.etree.ElementTree as ET
import xlsxwriter
import re
import pandas as pd
import sys
import os

'''
Features added
    Remove 5x white space from description
    trip empty lines in plugin output
    Get more details from asset list
        Out Comparison:
            L1 - Check for exact match (complete domain name) [Nessus(test.google.com) == AssetList(test.google.com)]
            L2 - Check for Nessus split match [Nessus(test) == AssetList(test.google.com)]
            L2 - Check for Both split match [Nessus(test.) == AssetList(test.)]
    Get details from FQDN plugin
    Input as argument
    policyValue & actualValue are added to report
    Colorcoded and customised asset list sheet names & diplaying the same    

Pending
    Multiple inputs
    
Flow:
    1.Read 1 *.nessus from command line argument
    2.Read assetlist.xlsx as input
    3.Generate output that use .nessus file and assetlist.xlsx contents  
'''
if len(sys.argv) > 1:
    tree = ET.parse(sys.argv[1])
    workbook = xlsxwriter.Workbook(os.path.splitext(sys.argv[1])[0] + ".xlsx")
else:
    tree = ET.parse('nessus_report.xml')
    workbook = xlsxwriter.Workbook('nessus_report.xlsx')
    
root = tree.getroot()
worksheet = workbook.add_worksheet()
asset_list_xlsx_file_name = 'AssetListxlsx.xlsx'
asset_list_VA_HCR_sheet_name = 'Server List'

if len(sys.argv) > 1:
    print(f'\n-------------- Activity Started [Single file will be processed] ---------------')
    print(f'\n+++++++++++++++++++++++++++++++++ WORKING on [{sys.argv[1]}]') #+++++++++++++++++++++++++++++++++++++
    print(f'++ Scan Type: \x1b[1;35;40mVA Scan Report \x1b[0m')
    print(f'++ Scan Inputs:')
    print(f'+++ Nessus XML File Name: \x1b[1;34;40m {sys.argv[1]}\x1b[0m')
    print(f'+++++ XLSX file for Assets: \x1b[1;34;40m {asset_list_xlsx_file_name}\x1b[0m')
    print(f'+++++++ Sheet name of Asset List: \x1b[1;34;40m {asset_list_VA_HCR_sheet_name}\x1b[0m')
    print(f'++ Scan Output: \x1b[1;34;40m {os.path.splitext(sys.argv[1])[0] + ".xlsx"}\x1b[0m')
    print(f'+ Scan started..\n') #+++++++++++++++++++++++++++++++++++++
    print(f'\n--------------------------------- Activity Completed -------------------------------------')



df = pd.read_excel(asset_list_xlsx_file_name, asset_list_VA_HCR_sheet_name)
df.replace([float('nan'), float('inf')], '', inplace=True)
input_val_error = False
input_val_count = 0
worksheet.write('A1', 'S.No')
worksheet.write('B1', 'Severity')
worksheet.write('C1', 'CVE\'s')
worksheet.write('D1', 'CVSS Base Score')
worksheet.write('E1', 'CVSS Vector')
worksheet.write('F1', 'Hostname')
worksheet.write('G1', 'IP Address')
worksheet.write('H1', 'OS')
worksheet.write('I1', 'Environment')
worksheet.write('J1', 'Network Tier')
worksheet.write('K1', 'Port')
worksheet.write('L1', 'Name')
worksheet.write('M1', 'Synopsys')
worksheet.write('N1', 'Description')
worksheet.write('O1', 'Solution')
worksheet.write('P1', 'See Also')
worksheet.write('Q1', 'Plugin Output')
worksheet.write('R1', 'Status')
worksheet.write('S1', 'Opensource Comments')
worksheet.write('T1', 'Customer Comments')
worksheet.write('U1', 'Agency Comments')
worksheet.write('V1', 'Nessus identity')
worksheet.write('W1', 'Plugin ID')
worksheet.write('X1', 'Sev No')
worksheet.write('Y1', 'CVSS 3.0 Base Score')
worksheet.write('Z1', 'CVSS 3.0 Vector')
worksheet.write('AA1', 'CVSS 2.0 Base Score')
worksheet.write('AB1', 'CVSS 2.0 Vector')
worksheet.write('AC1', 'Network Zone')
worksheet.write('AD1', 'Server Description')
worksheet.write('AE1', 'Err (if Reported)')

row = 1
ipv4_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}$')


def trim_start(string):
    string = string.replace('certificate\nchain', 'certificate chain')
    string = string.replace('not\nfound', 'not found')
    string = string.replace('unknown\ncertificate', 'unknown certificate')
    return string.strip()

def trim_5x_space(string):
    return re.sub(r'([\]\).,}A-Za-z])\s{5}([A-Za-z])', r'\1 \2', string)

def get_IP_from_nessus_identity(string):
    return string

def check_for_duplicates(string, src, dst, split_Scan=False):
    global input_val_error
    global input_val_count

    if split_Scan:
        x = df.loc[df[src].str.contains(string + "."), dst]
    else:
        x = df.loc[df[src] == string, dst]


    if (len(x) > 1) or (len(x) < 1):
        input_val_error = True
        input_val_count = input_val_count + 1
    else:
        input_val_error = False

    if len(x) > 1:
        print('\x1b[1;31;40m' + 'ERROR!' + '\x1b[0m' + ' [COUNT ' + str(
            input_val_count) + ']: Duplicate input detected for: ' + string + '.\t Selecting first entry')
        return x.values[0]
    elif len(x) < 1:
        print('\x1b[1;33;40m' + 'WARNING!' + '\x1b[0m' + ' [COUNT ' + str(
            input_val_count) + ']: No entry detected for: ' + string + '.\t Selecting first entry')
        return ''
    else:
        return x.values[0]

def get_IP_from_nessus_identity(string):
    x = check_for_duplicates(string, 'Server Name (FQDN)', 'IP Address',False)
    if x == '':
        print('\x1b[1;35;40m' + 'L2' + '\x1b[0m ', end="")
        x = check_for_duplicates(string.split(".")[0], 'Server Name (FQDN)', 'IP Address',False)
        if x == '':
            print('\x1b[1;35;40m' + 'L3' + '\x1b[0m ', end="")
            return check_for_duplicates(string.split(".")[0], 'Server Name (FQDN)', 'IP Address', True)
        else:
            return x
    else:
        return x


def get_env_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'Environment')


def get_fqdn_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'Server Name (FQDN)')


def get_nwzone_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'Network Zone')


def get_nwtier_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'Network Tier')


def get_os_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'OS')


def get_srvdesc_from_ip(string):
    return check_for_duplicates(string, 'IP Address', 'Server Description')

def get_asset_details():
    global ip_address
    global ip_env
    global ip_fqdn
    global ip_nw_zone
    global ip_nw_tier
    global ip_OS
    global ip_srv_desc

    ip_env = get_env_from_ip(ip_address)
    ip_fqdn = get_fqdn_from_ip(ip_address)
    ip_nw_zone = get_nwzone_from_ip(ip_address)
    ip_nw_tier = get_nwtier_from_ip(ip_address)
    ip_OS = get_os_from_ip(ip_address)
    ip_srv_desc = get_srvdesc_from_ip(ip_address)



for report_host in root.findall('Report/ReportHost'):
    nessus_host = report_host.get('name')
    if ipv4_pattern.match(nessus_host):
        ip_address = nessus_host
    else:
        print('\x1b[2;35;40m' + 'INFO!' + '\x1b[0m Hostname detected as source. Searching for IP of ' + nessus_host + '.')
        ip_address = get_IP_from_nessus_identity(nessus_host)

    get_asset_details()

    print(
        f"N-Host: {nessus_host}|IP: {ip_address}|Hostname: {ip_fqdn}|ENV: {ip_env}|NWzone: {ip_nw_zone}|NWtier: {ip_nw_tier}|OS: {ip_OS}|Sdesc: {ip_srv_desc}|Error: {input_val_error}|Err-count: {input_val_count}")

    for report_item in report_host.findall('ReportItem'):
        plugin_id = report_item.get('pluginID')
        if plugin_id == '12053':
            plugin_output = report_item.find('plugin_output').text if report_item.find(
                    'plugin_output') is not None else ''
            if plugin_output != '':
                plugin_output = trim_start(plugin_output)
                temp_ip = plugin_output.split(" ")[0]
                if ip_address != temp_ip:
                    input_val_error = True
                    input_val_count = input_val_count + 1

                    print('\x1b[1;33;40m' + 'WARNING!' + '\x1b[0m' + ' [COUNT ' + str(
                        input_val_count) + ']: Different IP detected. FQDN might be wrong. Nessus Host: ' + nessus_host + ', IP on Server: ' + temp_ip + ' IP on asset list: ' + ip_address + '. Overwriting Asset IP with Nessus detected IP.')
                    ip_address = temp_ip
                    get_asset_details()  # Get asset details
                    print(
                        f"N-Host: {nessus_host}|IP: {ip_address}|Hostname: {ip_fqdn}|ENV: {ip_env}|NWzone: {ip_nw_zone}|NWtier: {ip_nw_tier}|OS: {ip_OS}|Sdesc: {ip_srv_desc}|Error: {input_val_error}|Err-count: {input_val_count}")

    for report_item in report_host.findall('ReportItem'):
        port = report_item.get('port')
        if port == "0":
             port = ''
        severity = report_item.get('severity')
        plugin_id = report_item.get('pluginID')
        plugin_name = report_item.get('pluginName')
        description = report_item.find('description').text

        description=trim_5x_space(description)

        solution = report_item.find('solution').text
        cve = ''
        for reference in report_item.findall('cve'):
            cve += reference.text + ', '
        cve = cve[:-2]

        risk = report_item.find('risk_factor').text
        if risk == "None":
            continue
        cvss3_base_score = report_item.find('cvss3_base_score').text if report_item.find('cvss3_base_score') is not None else ''
        cvss3_vector = report_item.find('cvss3_vector').text if report_item.find('cvss3_vector') is not None else ''
        cvss2_base_score = report_item.find('cvss_base_score').text if report_item.find('cvss_base_score') is not None else ''
        cvss2_vector = report_item.find('cvss_vector').text if report_item.find('cvss_vector') is not None else ''
        if cvss3_base_score != '':
            cvss_base_score = "CVSS 3.0: " + cvss3_base_score
        elif cvss2_base_score != '':
            cvss_base_score = "CVSS 2.0: " + cvss2_base_score
        else:
            cvss_base_score = ""

        if cvss3_vector != '':
            cvss_vector = cvss3_vector
        elif cvss2_vector != '':
            cvss_vector = cvss2_vector
        else:
            cvss_vector = ""

        scores = re.findall(r'\d+\.\d+', cvss3_base_score)
        score = float(scores[0]) if len(scores) > 0 else 0.0
        if score >= 9.0:
            actual_severity = "Critical"
        elif score >= 7.0:
            actual_severity = "High"
        elif score >= 4.0:
            actual_severity = "Medium"
        elif score >= 0.1:
            actual_severity = "Low"
        else:
            actual_severity = risk


        synopsys = report_item.find('synopsis').text
        synopsys=trim_5x_space(synopsys)

        see_also = ''
        for reference in report_item.findall('see_also'):
            see_also += reference.text + ', '
        see_also = see_also[:-2]
        plugin_output = report_item.find('plugin_output').text if report_item.find(
            'plugin_output') is not None else ''

        plugin_output = trim_start(plugin_output)
        worksheet.write(row, 1, actual_severity)
        worksheet.write(row, 2, cve)
        worksheet.write(row, 3, cvss_base_score)
        worksheet.write(row, 4, cvss_vector)

        worksheet.write(row, 5, ip_fqdn)
        worksheet.write(row, 6, ip_address)
        worksheet.write(row, 7, ip_OS)
        worksheet.write(row, 8, ip_env)
        worksheet.write(row, 9, ip_nw_tier)


        worksheet.write(row, 10, port)
        worksheet.write(row, 11, plugin_name)
        worksheet.write(row, 12, synopsys)
        worksheet.write(row, 13, description)
        worksheet.write(row, 14, solution)
        worksheet.write(row, 15, see_also)
        worksheet.write(row, 16, plugin_output)
        worksheet.write(row, 17, 'Open')

        worksheet.write(row, 21, nessus_host)
        worksheet.write(row, 22, plugin_id)
        worksheet.write(row, 23, severity)
        worksheet.write(row, 24, cvss3_base_score)
        worksheet.write(row, 25, cvss3_vector)
        worksheet.write(row, 26, cvss2_base_score)
        worksheet.write(row, 27, cvss2_vector)

        worksheet.write(row, 28, ip_nw_zone)
        worksheet.write(row, 29, ip_srv_desc)
        if input_val_error:
            worksheet.write(row, 30, input_val_count)
        row += 1
workbook.close()

